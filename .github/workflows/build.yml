name: CI/CD Pipeline with SonarQube

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Run tests and SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: http://sonarqube.bluesunnywings.com
      run: |
        ./mvnw clean verify sonar:sonar \
          -Dsonar.projectKey=spring-petclinic \
          -Dsonar.projectName="Spring PetClinic" \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.token=$SONAR_TOKEN

    - name: Run SCA with Trivy (Dependencies)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-sca-results.json'

    - name: Export SonarQube results to JSON
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: http://sonarqube.bluesunnywings.com
      run: |
        # Wait for SonarQube analysis to complete
        sleep 30
        
        # Export issues
        curl -u $SONAR_TOKEN: \
          "$SONAR_HOST_URL/api/issues/search?componentKeys=spring-petclinic&ps=500" \
          -o sonarqube-issues.json
        
        # Export measures
        curl -u $SONAR_TOKEN: \
          "$SONAR_HOST_URL/api/measures/component?component=spring-petclinic&metricKeys=coverage,duplicated_lines_density,code_smells,bugs,vulnerabilities,security_hotspots,ncloc" \
          -o sonarqube-measures.json

    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-results
        path: |
          trivy-sca-results.json
          sonarqube-issues.json
          sonarqube-measures.json
        retention-days: 30

  build-and-push:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    
    env:
      IMAGE_NAME: petclinic
      REGISTRY: harbor.bluesunnywings.com/library
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Maven
      run: ./mvnw package -DskipTests

    - name: Log in to Harbor
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

    - name: Run Trivy image vulnerability scanner (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
        format: 'json'
        output: 'trivy-image-results.json'

    - name: Run Trivy image vulnerability scanner (SARIF)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-image-scan-results
        path: |
          trivy-image-results.json
          trivy-image-results.sarif
        retention-days: 30

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'